name: 'Get TFE output'
description: 'Get TFE output'
inputs:
  tf_api_token:
    description: 'TF_API_TOKEN'
    required: true
  tf_plan_output:
    description: 'tf plan output'
    required: true
outputs:
  tfplan: 
    description: "Random number"
    value: ${{ steps.get_tfe_url.outputs.tfplan }}
runs:
  using: "composite"
  steps:
    - id: get_tfe_url
      shell: bash
      run: |
        run_url=$(echo '$INPUT_TF_PLAN_OUTPUT' | grep -o 'run-[A-Za-z0-9]*')
        tfe_plan_url='https://app.terraform.io/api/v2/runs/${run_url}/plan'
        echo $tfe_plan_url 
        curl --header 'Authorization: Bearer $tf_api_token' --header 'Content-Type: application/json' $tfe_plan_url -o tfplan.json
        tfplan_env=$(cat tfplan.json)
        echo $tfplan_env
        echo "::set-output name=tfplan::$(echo $tfplan_env)"
 
 
 
   # - id: envs #TODO cleanup GITHUB_WORKSPACE and other env vars 
    #   run: |
    #     export RUNNER_TEMP="/tmp" \
    #     export terraform_version="${{ inputs.terraform_version }}" \
    #     export cli_config_credentials_token="${{ inputs.cli_config_credentials_token }}" \
    #     export VALIDATE_ALL_CODEBASE="false" \
    #     export DEFAULT_BRANCH="master" \
    #     export FILTER_REGEX_INCLUDE=".*terraform/.*" \
    #     export GITHUB_TOKEN="${{ inputs.token }}" \
    #     export GITHUB_WORKSPACE=$GITHUB_WORKSPACE
    #   shell: bash
    # - id: git_clone
    #   run: git clone https://github.com/hashicorp/setup-terraform
    #   shell: bash
    # - id: tf_install  
    #   run: node setup-terraform/dist/index.js
    #   shell: bash
    # - id: super_linter #We can speed up the proccess (which takes at least few minutes to process by reworking the Docker image)
    #   run: |
    #       docker run -e RUN_LOCAL=true -e VALIDATE_ALL_CODEBASE=false -e DEFAULT_BRANCH=master -e FILTER_REGEX_INCLUDE=".*terraform/.*" -v ${{github.workspace}}:/tmp/lint ghcr.io/github/super-linter:v3.15.5 || true
    #   shell: bash
    # - id: tf_fmt
    #   run: terraform fmt -check terraform
    #   shell: bash
    # - id: tf_init
    #   run: terraform init terraform
    #   shell: bash
    # - id: tf_plan
    #   run: terraform plan -no-color terraform
    #   shell: bash
    # - id: cleanup_tf_plan
    #   run: |
    #       logcontent=${{ steps.code_scan.output }}
    #       logcontent="$(ls ./code_scan/*.tap | xargs cat)"
    #       logcontent="${logcontent//'%'/'%25'}"
    #       logcontent="${logcontent//$'\n'/'%0A'}"
    #       logcontent="${logcontent//$'\r'/'%0D'}"
    #       logcontent="${logcontent//$'$'/'\$'}"
    #       logcontent="${logcontent//$'`'/'%60'}"
    #       echo "::set-output name=content::$logcontent"
    #   shell: bash
    # - id: 